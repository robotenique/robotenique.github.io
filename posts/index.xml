<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Robotenique&#39;s Home</title>
    <link>https://robotenique.github.io/posts/</link>
    <description>Recent content in Posts on Robotenique&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://robotenique.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python map</title>
      <link>https://robotenique.github.io/posts/2017-03-10-python-map/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-03-10-python-map/</guid>
      <description>A cool Subway map to know more about the different things you can do with Python!
by Hairy Sun - Geek blog!</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://robotenique.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://robotenique.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Generating grid/image points in Python</title>
      <link>https://robotenique.github.io/posts/2017-09-17-image-grid-python/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-09-17-image-grid-python/</guid>
      <description>I was doing some assignment about the Percolation Problem, where given a graph, find if the top of the graph is connected to the bottom. There was some test files included, but I wanted to create my own images.
The input file of my assignment has, in the first line, the dimensions of the image. The images are always in a square ratio, n x n &amp;ldquo;pixels&amp;rdquo;. The remaining lines of the file contains pairs (a b) of the coordinates in the grid n x n.</description>
    </item>
    
    <item>
      <title>Atom &amp; Latex</title>
      <link>https://robotenique.github.io/posts/2017-05-24-atom-latex/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-05-24-atom-latex/</guid>
      <description>LaTeX is a DSL (domain specific language) that provides powerful typesetting tools. You can write complex mathematical expressions and much more, for example, the following characteristic polynomial expression was rendered using LaTeX (MathJax):
$$ \chi(\lambda) = \left| \begin{array}{ccc} \lambda - a &amp;amp; -b &amp;amp; -c \\\
-d &amp;amp; \lambda - e &amp;amp; -f \\\
-g &amp;amp; -h &amp;amp; \lambda - i \end{array} \right| $$
There are amazing online software to work with LaTeX such as ShareLaTeX or Overleaf, but sometimes you don&amp;rsquo;t have access to the internet, or want to have a compact environment to do most of your job.</description>
    </item>
    
    <item>
      <title>Atom editor</title>
      <link>https://robotenique.github.io/posts/2017-03-21-atom-edit/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-03-21-atom-edit/</guid>
      <description>Have you ever heard of Atom? Atom is a text editor, similar to Sublime Text, but with a lot of different features, and much more flexibility and freedom. It&amp;rsquo;s described as A hackable text editor for the 21st century, because it&amp;rsquo;s very easy to create and change many of the settings available, and there&amp;rsquo;s a lot!
Atom is my personal editor, I prefer using it than the proprietary (but relatively good) Sublime Text, and other MAINSTREAM editors like vi/vim or emacs.</description>
    </item>
    
    <item>
      <title>Debug C programs using gdb</title>
      <link>https://robotenique.github.io/posts/2017-03-12-debug-gdb/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-03-12-debug-gdb/</guid>
      <description>GDB(GNU Project Debugger) is, as the name implies, a debugger with a lot of features to make your life easy when programming in C. Using gdb helps to debug C programs in real execution time, i.e. you can put break points in the program to evaluate the value of variables, detect when something has gone wrong, and many other uses. Here I&amp;rsquo;ll cover the basics that I use to debug simple C programs.</description>
    </item>
    
    <item>
      <title>Fast and easy Python LAN server</title>
      <link>https://robotenique.github.io/posts/2017-03-12-python-server/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-03-12-python-server/</guid>
      <description>This is a very simple tip, but it&amp;rsquo;s very useful when you want others to access your files, or you want to transfer files easily. Just open the terminal, navigate to the folder you want to serve, and then type:
$ python -m SimpleHTTPServer The server will be created in the IP of your machine.
To find your IP, type
$ ifconfig -all or
$ ip a If you&amp;rsquo;re using Python 3.</description>
    </item>
    
    <item>
      <title>Debian Stretch setup</title>
      <link>https://robotenique.github.io/posts/2017-02-23-debian-stretch/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/2017-02-23-debian-stretch/</guid>
      <description>Hello! In this post, I&amp;rsquo;ll show how is the setup that I use, the most common applications I mostly use when programming, some useful plugins, anyway, my complete programming environment. I&amp;rsquo;ll first cover my OS setup, then the applications and finally the customizations. Feel free to contact me if there&amp;rsquo;s any doubt, but I&amp;rsquo;ll try to be clear and concise.
DISCLAIMER: You do everything in your &amp;gt;OWN&amp;lt; risk! :D
 The setup I use a dualboot with debian and Windows 10.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://robotenique.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://robotenique.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://robotenique.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>